https://github.com/ 에 로그인해서 New repository 생성(Name 결정, Public/private 여부 설정)
생성하면 다음 화면에 있는 주소를 가져와서(지금 이건 https://github.com/godwnsl111/KT_Aivle_School_Lecture.git)
VScode의 Source Control 탭 - Views and More Actions(점 3개) - Remote - Add remote 를 클릭하면 위에 뜨는 창에 붙여넣고 이름을 붙여준다
일단 여기까지만 쓰고 Commit 을 클릭해보자(저장은 당연히 해야한다) - 누르기 전에 윗칸에서 Commit의 제목도 붙여준다(지금은 v1)
이제 Commit 까지 했다면 로컬 저장소, 즉 내가 작업하고 있는 이 컴퓨터에는 내용이 저장되었다. 
그런데 나 혼자만 할 거면 상관없지만 협업이든 공유든 하려면 로컬이 아닌 저장소에서 작업할 필요성이 있다.

그래서 이걸 github에 올리도록 한다. Views and More Actions - Push 를 클릭
이렇게 하면 방금 전에 Commit 한 내용이 내가 연결해둔 github의 repository에 업로드된다. 즉 로컬 저장소에서 원격 저장소로 업로드 된 것이다.

하단의 Terminal - 오른쪽에 있는 + 아래 메뉴를 보면 Git Bash가 있다. 여기서 git log 명령어로 지금까지 commit 한 것의 세부사항을 볼 수 있다.
Extensions 탭에 Git Graph를 검색해서 설치한다. 이걸로 지금까지 Commit, Push 한 것들을 그래프의 형태로 파악할 수 있다.

위는 내가 혼자 작업해서 업로드한 경우였지만, 이걸 여러 명이 공유해서 하게 된다면 주의할 점이 생긴다. 예를 들어
Local1, Local2 가 각각 작업하고 원격 저장소(Git)에 공유하면서 프로젝트를 진행한다고 생각해보자.
L1이 먼저 작업물을 Commit/Push 하면 Local1 자신의 저장소와 원격 저장소에는 그 내용이 들어가게 되지만 Local2의 저장소에는 그 내용이 없다.
이런 상황에서 Local2가 작업물을 Commit/Push 하려고 한다면? L1이 작업해서 이미 올려둔건 없으니 내용이 다른데?
그걸 그대로 업로드해서 덮어씌우게 된다면 L1이 작업한 내용은 사라질 것이다! 내용이 달라서 충돌 Conflict 가 일어나기 때문이다.
그래서 L2는 Views and More Actions - Fetch 를 통해 L1이 업로드해 둔 것을 자신의 로컬 저장소에 다운받는다.
그 다음 Views and More Actions - Branch - Merge Branch 를 통해 그 내용을 자신의 작업물과 합친다.
이렇게 원격 저장소에 있는 것과 로컬에 있는 것을 맞춰준 후 L2는 자신의 작업물을 Push 할 수 있게 된다.
여기서 Fetch - Merge 의 두단계를 하나로 합친 것이 Pull이다(보통 이걸 많이 쓴다).

나는 이 위까지 작성한 후에 v2 제목을 붙여서 다시 한 번 Commit - Push 했다. 2번째 버전인 셈.
그리고 이 말 새로 적은것도 반영하려면 v3를 Push 하게 될 것이다.